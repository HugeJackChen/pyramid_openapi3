# Python CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-python/ for more details
#
version: 2

defaults: &defaults
    working_directory: ~/repo
    environment:
      PIPENV_VENV_IN_PROJECT: 1
      PIPENV_IGNORE_VIRTUALENVS: 1
    docker:
      - image: circleci/python:3.7.4

workflows:
  version: 2
  build_and_deploy:
    jobs:
      - py37:
          filters:
            tags:
              only: /.*/
#      - py38:
#          filters:
#            tags:
#              only: /.*/
      - build:
          filters:
            tags:
              only: /.*/
      - release:
          requires:
            - build
          filters:
            tags:
              only: /[0-9]+\.[0-9]+\.[0-9]+/
            branches:
              ignore: /.*/

jobs:

  py37:
    working_directory: ~/repo
    docker:
      - image: circleci/python:3.7.4
    steps:
      - checkout
      - run:
          name: install tox dependencies
          command: |
            unset PYENV_ROOT
            echo 'export PATH="/home/circleci/.pyenv/bin:$PATH"' >> $BASH_ENV
            echo 'eval "$(pyenv init -)"' >> $BASH_ENV
            echo 'eval "$(pyenv virtualenv-init -)"' >> $BASH_ENV
            cat /home/circleci/.bashrc
            source /home/circleci/.bashrc
            sudo curl https://pyenv.run | bash  # https://github.com/pyenv/pyenv-installer
            pyenv install 3.7.4 3.8.0b3
            sudo pip install -U pip setuptools
            sudo pip install tox tox-pyenv
            pyenv local 3.7.4 3.8.0b3

      - run:
          name: run tests via tox
          command: |
            tox

#  py38:
#    working_directory: ~/repo
#    docker:
#      - image: circleci/python:3.8.0b3
#    steps:
#      - checkout
#      - run:
#          name: install tox dependencies
#          command: |
#            sudo pip install -U pip setuptools
#            sudo pip install tox
#
#      - run:
#          name: run tests via tox
#          command: |
#            tox -e py38
#
  build:
    <<: *defaults

    steps:
      - checkout

      # Download and cache dependencies
      - restore_cache:
          keys:
            - v5-dependencies-{{ checksum "Pipfile.lock" }}
            # fallback to using the latest cache if no exact match is found
            - v5-dependencies-

      - run:
          name: install dependencies
          command: |
            sudo pip install pipenv
            pipenv install --dev --deploy
            touch .installed

      - save_cache:
          paths:
            - ./.venv
          key: v5-dependencies-{{ checksum "Pipfile.lock" }}

      - run:
          name: run tests
          command: |
            make tests

      - run:
          name: run tests for the singlefile example
          command: |
            cd examples/singlefile
            pipenv run python -m unittest app.py

      - run:
          name: run tests for the todoapp example
          command: |
            cd examples/todoapp
            pipenv run python -m unittest tests.py

  release:
    <<: *defaults

    steps:
      - checkout

      - restore_cache:
          keys:
            - v5-dependencies-{{ checksum "Pipfile.lock" }}
            # fallback to using the latest cache if no exact match is found
            - v5-dependencies-

      - run:
          name: install dependencies
          command: |
            sudo pip install pipenv
            pip install pipenv
            pipenv install --dev --deploy
            touch .installed

      - save_cache:
          paths:
            - ./.venv
          key: v5-dependencies-{{ checksum "Pipfile.lock" }}

      - run:
          name: verify git tag vs. version
          command: |
            pipenv run python setup.py verify

      - run:
          name: init .pypirc
          command: |
            echo -e "[pypi]" >> ~/.pypirc
            echo -e "username = zupo" >> ~/.pypirc
            echo -e "password = $PYPI_PASSWORD" >> ~/.pypirc

      - run:
          name: create packages
          command: |
            pipenv run python setup.py sdist
            pipenv run python setup.py bdist_wheel

      - run:
          name: upload to pypi
          command: |
            pipenv run twine upload dist/*
